import { CircleGeometry, CylinderGeometry, DirectionalLight, DirectionalLightHelper, DoubleSide, Group, Mesh, MeshStandardMaterial, PlaneGeometry, PointLight, PointLightHelper, SphereGeometry, TextureLoader } from "three";

const loader = new TextureLoader();
const map = loader.load('puse2.png');
const bottom = loader.load('pad3.PNG');
const fmat = new MeshStandardMaterial({
    color: 0x112974ff,
    // map: map,
    transparent: true,
    emissive: 0x112974ff,
    emissiveMap: map,
    emissiveIntensity: 2,
    alphaMap: map,
    metalness: 0,
    // opacity: 0.5,
});

const fgeo = new SphereGeometry(6);
// const fgeo = new PlaneGeometry(16, 16);


const goldenMat = new MeshStandardMaterial({
    color: 0xffdc961a,
    metalness: 0.6,
    depthTest: true,
    depthWrite: true,
    flatShading: true,
    roughness: 0.3,
});

export function makePad(golden = false) {
    const pad = new Group();
    const metalMaterial = new MeshStandardMaterial({
        color: 0xff888888,
        metalness: 0.6,
        depthTest: true,
        depthWrite: true,
        flatShading: true,
        roughness: 0.3,
    });

    const material = golden ? goldenMat : metalMaterial;

    const topPart = new Mesh(new CylinderGeometry(30, 30, 4, 15), material);
    const middlePart = new Mesh(new CylinderGeometry(18, 18, 4), material);
    const bottomPart = new Mesh(new CylinderGeometry(9, 9, 4, 15), material);
    topPart.position.set(0, -2, 0);
    middlePart.position.set(0, -6, 0);
    bottomPart.position.set(0, -10, 0);

    const exhaust = new Mesh(new CircleGeometry(9, 15), new MeshStandardMaterial({ map: bottom, bumpMap: bottom, bumpScale: 1, displacementMap: bottom, displacementScale: 1, side: DoubleSide, emissiveMap: bottom, emissive: 0xffffff }));
    exhaust.position.set(0, -12, 0)
    exhaust.rotation.x = Math.PI / 2;

    const exhaustLight = new DirectionalLight(0x112974ff, 0.6);
    exhaustLight.position.y = -12;
    exhaustLight.target.position.y = -22;
    exhaustLight.target.updateWorldMatrix();
    const helper = new DirectionalLightHelper(exhaustLight);

    const flame = new Mesh(fgeo, fmat);
    flame.position.y = -22;
    flame.rotation.y = -Math.PI;



    pad.add(
        topPart,
        middlePart,
        bottomPart,
        // exhaust,
        // helper,
        flame,
        // exhaustLight,
        // exhaustLight.target,
    )
    return pad;
}