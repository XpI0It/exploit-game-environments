import {
  BackSide,
  Box3,
  Color,
  FogExp2,
  Group,
  Mesh,
  MeshPhongMaterial,
  MeshStandardMaterial,
  PerspectiveCamera,
  PointLight,
  Scene,
  SphereGeometry,
  TextureLoader,
  Vector3,
  WebGLRenderer,
} from "three";
import { makeColony } from "./building_colony";

class Game {
  constructor(
    renderElement,
    onFinish,
    width = window.innerWidth,
    height = window.innerHeight
  ) {
    if (renderElement == undefined || renderElement.tagName != "canvas") {
      renderElement = document.createElement("canvas");
      document.body.appendChild(renderElement);
    }
    this.renderElement = renderElement;
    this.textureLoader = new TextureLoader();

    // <Renderer setup
    this.renderer = new WebGLRenderer({
      canvas: renderElement,
      antialias: true,
    });
    this.renderer.setPixelRatio(window.devicePixelRatio);
    this.renderer.setSize(width, height);
    // Renderer setup>

    // <Camera setup
    this.devCam = new PerspectiveCamera(75, width / height, 0.1, 5000);
    this.devCam.position.set(-70, 50, 20);

    this.playerCam = new PerspectiveCamera(30, width / height, 0.1, 5000);
    this.playerCam.position.set(-150, 70, 20);

    this.camera = this.playerCam;
    // Camera Setup>

    // <Scene Setup
    this.scene = new Scene();
    this.scene.background = new Color(0xff000000);
    this.scene.fog = new FogExp2(0xff111111, 0.0015);
    // Scene Setup>

    // <Loading Textures
    this.textures = {
      moonDisplacementMap: this.textureLoader.load("displacement.jpg"),
      moonTexture: this.textureLoader.load("moon.jpg"),
    };
    // Loading Textures>

    // <Define Env Components
    const moon = new Group();
    moon.add(
      new Mesh(
        new SphereGeometry(200, 1800, 1800),
        new MeshPhongMaterial({
          map: this.textures.moonTexture,
          displacementMap: this.textures.moonDisplacementMap,
          displacementScale: 0.0,
          bumpMap: this.textures.moonDisplacementMap,
          bumpScale: 0.04,
          reflectivity: 0,
          shininess: 0,
          emissive: 0xffffffff,
          emissiveMap: this.textures.moonTexture,
          emissiveIntensity: 12,
        })
      ),
      new PointLight(0xffffff, 1, 5000)
    );
    moon.position.set(1200, 350, 0);

    const smokeC = makeSmoke();
    smokeC.position.set(1300, 100, 0);

    const smokeL = makeSmoke(650, 15);
    smokeL.position.set(1100, 60, -window.innerWidth / 2);

    const smokeR = makeSmoke(650, 15);
    smokeR.position.set(1100, 70, window.innerWidth / 2);

    const colony = makeColony();
    colony.position.x = 400;
    const colonyAab = new Box3();
    colonyAab.setFromObject(colony);
    colony.position.add(
      new Vector3(0, -plotHeight, -(colonyAab.getSize(new Vector3()).z / 2))
    );

    this.envComponents = {
      globe: new Mesh(
        new SphereGeometry(2000),
        new MeshStandardMaterial({ color: 0xff000000, side: BackSide })
      ),
      moon: moon,
      smokeC: smokeC,
      smokeL: smokeL,
      smokeR: smokeR,
    };
  }
}
